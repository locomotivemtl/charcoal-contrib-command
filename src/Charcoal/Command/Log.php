<?php

namespace Charcoal\Command;

use Charcoal\Model\AbstractModel;
use DateTime;
use DateTimeInterface;
use Exception;
use InvalidArgumentException;

class Log extends AbstractModel
{
    /**
     * @var DateTime
     */
    protected $ts;

    /**
     * @var string
     */
    protected $command;

    /**
     * @var mixed
     */
    protected $arguments;

    /**
     * @var mixed
     */
    protected $results;

    /**
     * @var bool
     */
    protected $success;

    /**
     * @return DateTime
     */
    public function getTs()
    {
        return $this->ts;
    }

    /**
     * Set when the object was created.
     *
     * @param  DateTimeInterface|string|null $timestamp The timestamp at object's creation.
     *                                                  NULL is accepted and instances of DateTimeInterface are
     *                                                  recommended; any other value will be converted (if possible)
     *                                                  into one.
     * @throws InvalidArgumentException If the timestamp is invalid.
     * @return self
     */
    public function setTs($timestamp)
    {
        if ($timestamp === null) {
            $this->ts = null;
            return $this;
        }

        if (is_string($timestamp)) {
            try {
                $timestamp = new DateTime($timestamp);
            } catch (Exception $e) {
                throw new InvalidArgumentException(sprintf(
                    'Invalid timestamp: %s',
                    $e->getMessage()
                ), 0, $e);
            }
        }

        if (!$timestamp instanceof DateTimeInterface) {
            throw new InvalidArgumentException(
                'Invalid timestamp value. Must be a date/time string or a DateTime object.'
            );
        }

        $this->ts = $timestamp;

        return $this;
    }

    /**
     * @return string
     */
    public function getCommand()
    {
        return $this->command;
    }

    /**
     * @param string $command
     * @return Log
     */
    public function setCommand($command)
    {
        $this->command = $command;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getArguments()
    {
        return $this->arguments;
    }

    /**
     * @param mixed $arguments
     * @return Log
     */
    public function setArguments($arguments)
    {
        $this->arguments = $arguments;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getResults()
    {
        return $this->results;
    }

    /**
     * @param mixed $results
     * @return Log
     */
    public function setResults($results)
    {
        $this->results = $results;
        return $this;
    }

    /**
     * @return bool
     */
    public function getSuccess()
    {
        return $this->success;
    }

    /**
     * @param bool $success
     * @return Log
     */
    public function setSuccess($success)
    {
        $this->success = $success;
        return $this;
    }

    /**
     * @return bool
     */
    public function preSave()
    {
        $this->setTs('now');
        return parent::preSave(); // TODO: Change the autogenerated stub
    }
}
